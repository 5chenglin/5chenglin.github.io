<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sublime Text 3 C++ ClangFormat格式化</title>
      <link href="2021/01/20/Sublime-Text3-build-run-cpp-file-and-format-cpp-codes/"/>
      <url>2021/01/20/Sublime-Text3-build-run-cpp-file-and-format-cpp-codes/</url>
      
        <content type="html"><![CDATA[<h1 id="Sublime-Text-3-ClangFormat格式化"><a href="#Sublime-Text-3-ClangFormat格式化" class="headerlink" title="Sublime Text 3 ClangFormat格式化"></a>Sublime Text 3 ClangFormat格式化</h1><p>本文环境为：<code>Windows</code>、<code>Sublime Text 3</code></p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p><code>ctrl+shift+p</code>找到<code>Package Control: Install Package</code><br>搜索<code>ClangFormat</code>，等待安装即可</p><h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3><p><code>Tool</code> -&gt; <code>Build System</code> -&gt; <code>New Build System</code><br>保存文件名：myc++.build</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;&quot;path&quot;: &quot;C:&#x2F;MinGW&#x2F;bin&quot;,&quot;shell_cmd&quot;: &quot;g++ \&quot;$&#123;file&#125;\&quot; -o \&quot;$&#123;file_path&#125;&#x2F;$&#123;file_base_name&#125;\&quot;&quot;,&quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,&quot;working_dir&quot;: &quot;$&#123;file_path&#125;&quot;,&quot;selector&quot;: &quot;source.c, source.c++&quot;,&quot;variants&quot;:[&#123;&quot;name&quot;: &quot;Run&quot;,&quot;shell_cmd&quot;: &quot;g++ \&quot;$&#123;file&#125;\&quot; -o \&quot;$&#123;file_path&#125;&#x2F;$&#123;file_base_name&#125;\&quot; &amp;&amp; \&quot;$&#123;file_path&#125;&#x2F;$&#123;file_base_name&#125;\&quot; &lt; in.txt &gt; out.txt&quot;&#125;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译选项配置好后</p><p>按<code>F7</code>，然后选择第二个<code>xxx Run</code>，以后直接按<code>F7</code>即可编译运行</p><p>关于编译选项的一些解释：</p><ul><li>sublime官方：<a href="http://sublimetext.info/docs/en/reference/build_systems.html">http://sublimetext.info/docs/en/reference/build_systems.html</a></li><li>中文：<a href="http://sublimetext.info/docs/en/reference/build_systems.html">https://www.cnblogs.com/jacen789/p/7801977.html</a></li></ul><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>安装<code>llvm</code>，一般装过vs后都会有的，直接Everything搜一波，我找到我的路径在<code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\Llvm\\bin\\clang-format.exe</code></p><p>或者</p><p>下载地址为<a href="http://releases.llvm.org/">http://releases.llvm.org/</a> 。在Windows系统下，直接下载<code>binary</code>版本并安装即可。</p><h4 id="Settings-User"><a href="#Settings-User" class="headerlink" title="Settings-User"></a>Settings-User</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;    &#x2F;&#x2F; This is the path to the binary for clang-format. If it is in your path,    &#x2F;&#x2F; it should just work out-of-the-box. Otherwise, you can set the full path,    &#x2F;&#x2F; which will look like this:     &#x2F;&#x2F;    &quot;binary&quot;: &quot;&#x2F;path&#x2F;to&#x2F;clang&#x2F;bin&#x2F;clang-format&quot;    &#x2F;&#x2F; Note that you can set this from within ST directly through the Command    &#x2F;&#x2F; Palette.     &quot;binary&quot;: &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\Llvm\\bin\\clang-format.exe&quot;,    &#x2F;&#x2F; We use the Google style by default. This can be selected from ST using    &#x2F;&#x2F; the Command Palette. Choosing &#39;Custom&#39; means that the settings will    &#x2F;&#x2F; be loaded from the Sublime Text settings file (which is accessed    &#x2F;&#x2F; from within ST through preferences. Choosing &#39;File&#39; will look in the     &#x2F;&#x2F; local directories from a clang-format settings file. See the clang-format    &#x2F;&#x2F; documentation to see how this works.     &quot;style&quot;: &quot;Custom&quot;,    &#x2F;&#x2F; Setting this to true will run the formatter on every save. If you want to    &#x2F;&#x2F; only enable this for a given project, try checking out the package    &#x2F;&#x2F; &quot;Project-Specific&quot;.        &quot;format_on_save&quot;: true,    &#x2F;&#x2F; If format_on_save is set to true, ClangFormat checks if the current file    &#x2F;&#x2F; has its syntax set to a language in the list below. If it is in the list,    &#x2F;&#x2F; then the file will be formatted by ClangFormat.    &quot;languages&quot;: [&quot;C&quot;, &quot;C++&quot;, &quot;C++11&quot;, &quot;JavaScript&quot;, &quot;Objective-C&quot;, &quot;Objective-C++&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Custom-Style-User"><a href="#Custom-Style-User" class="headerlink" title="Custom Style-User"></a>Custom Style-User</h4><p>具体样式，可以参考<a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html">官方</a>给出的说明。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;    &quot;BasedOnStyle&quot;: &quot;Google&quot;,    &quot;IndentWidth&quot;: 4,    &quot;AlignAfterOpenBracket&quot;: true,    &quot;AlignConsecutiveAssignments&quot;: true,    &#x2F;&#x2F;# 连续声明时，对齐所有声明的变量名    &quot;AlignConsecutiveDeclarations&quot;: false,    &quot;MaxEmptyLinesToKeep&quot;: 4,    &quot;BreakBeforeBraces&quot;: &quot;Attach&quot;,    &quot;AllowShortIfStatementsOnASingleLine&quot;: true,    &quot;IndentCaseLabels&quot;: true,    &quot;ObjCBlockIndentWidth&quot;: 4,    &quot;ObjCSpaceAfterProperty&quot;: true,    &quot;ColumnLimit&quot;: 0,    &quot;AlignTrailingComments&quot;: true,    &quot;SpaceAfterCStyleCast&quot;: true,    &quot;SpacesInParentheses&quot;: false,    &quot;SpacesInSquareBrackets&quot;: false,    &quot;TabWidth&quot;: 4,    &quot;UseTab&quot;: &quot;Never&quot;,    &quot;AllowShortBlocksOnASingleLine&quot;: true,    &quot;AllowShortIfStatementsOnASingleLine&quot;: true,    &quot;AllowShortLoopsOnASingleLine&quot;: true,    &quot;BraceWrapping&quot;:&#123;        &quot;AfterClass&quot;:             false,        &quot;AfterControlStatement&quot;:  false,        &quot;AfterEnum&quot;:              false,        &quot;AfterFunction&quot;:          false,        &quot;AfterNamespace&quot;:         false,        &quot;AfterObjCDeclaration&quot;:   false,        &quot;AfterStruct&quot;:            false,        &quot;AfterUnion&quot;:             false,        &quot;BeforeCatch&quot;:            false,        &quot;BeforeElse&quot;:             false,        &quot;IndentBraces&quot;:           false,        &quot;SplitEmptyFunction&quot;:     true,        &quot;SplitEmptyRecord&quot;:       true,        &quot;SplitEmptyNamespace&quot;:    true    &#125;,    &quot;Cpp11BracedListStyle&quot;: true,    &quot;ColumnLimit&quot;: 80,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>当然也可以看这里对每个选项的中文解释</strong></p><pre class="line-numbers language-none"><code class="language-none">---# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProtoLanguage:Cpp# BasedOnStyle:LLVM# 访问说明符(public、private等)的偏移AccessModifierOffset:-4# 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)AlignAfterOpenBracket:Align# 连续赋值时，对齐所有等号AlignConsecutiveAssignments:true# 连续声明时，对齐所有声明的变量名AlignConsecutiveDeclarations:true# 左对齐逃脱换行(使用反斜杠换行)的反斜杠AlignEscapedNewlinesLeft:true# 水平对齐二元和三元表达式的操作数AlignOperands:true# 对齐连续的尾随的注释AlignTrailingComments:true# 允许函数声明的所有参数在放在下一行AllowAllParametersOfDeclarationOnNextLine:true# 允许短的块放在同一行AllowShortBlocksOnASingleLine:false# 允许短的case标签放在同一行AllowShortCaseLabelsOnASingleLine:false# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), AllAllowShortFunctionsOnASingleLine:Empty# 允许短的if语句保持在同一行AllowShortIfStatementsOnASingleLine:false# 允许短的循环保持在同一行AllowShortLoopsOnASingleLine:false# 总是在定义返回类型后换行(deprecated)AlwaysBreakAfterDefinitionReturnType:None# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数), #   AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)AlwaysBreakAfterReturnType:None# 总是在多行string字面量前换行AlwaysBreakBeforeMultilineStrings:false# 总是在template声明后换行AlwaysBreakTemplateDeclarations:false# false表示函数实参要么都在同一行，要么都各自一行BinPackArguments:true# false表示所有形参要么都在同一行，要么都各自一行BinPackParameters:true# 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效BraceWrapping:     # class定义后面  AfterClass:false  # 控制语句后面  AfterControlStatement:false  # enum定义后面  AfterEnum:false  # 函数定义后面  AfterFunction:false  # 命名空间定义后面  AfterNamespace:false  # ObjC定义后面  AfterObjCDeclaration:false  # struct定义后面  AfterStruct:false  # union定义后面  AfterUnion:false  # catch之前  BeforeCatch:true  # else之前  BeforeElse:true  # 缩进大括号  IndentBraces:false# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)BreakBeforeBinaryOperators:NonAssignment# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似), #   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似), #   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom#   注：这里认为语句块也属于函数BreakBeforeBraces:Custom# 在三元运算符前换行BreakBeforeTernaryOperators:true# 在构造函数的初始化列表的逗号前换行BreakConstructorInitializersBeforeComma:false# 每行字符的限制，0表示没有限制ColumnLimit:200# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变CommentPragmas:&#39;^ IWYU pragma:&#39;# 构造函数的初始化列表要么都在同一行，要么都各自一行ConstructorInitializerAllOnOneLineOrOnePerLine:false# 构造函数的初始化列表的缩进宽度ConstructorInitializerIndentWidth:4# 延续的行的缩进宽度ContinuationIndentWidth:4# 去除C++11的列表初始化的大括号&#123;后和&#125;前的空格Cpp11BracedListStyle:false# 继承最常用的指针和引用的对齐方式DerivePointerAlignment:false# 关闭格式化DisableFormat:false# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)ExperimentalAutoDetectBinPacking:false# 需要被解读为foreach循环而不是函数调用的宏ForEachMacros:[ foreach, Q_FOREACH, BOOST_FOREACH ]# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，#   可以定义负数优先级从而保证某些#include永远在最前面IncludeCategories:   - Regex:&#39;^&quot;(llvm|llvm-c|clang|clang-c)&#x2F;&#39;    Priority:2  - Regex:&#39;^(&lt;|&quot;(gtest|isl|json)&#x2F;)&#39;    Priority:3  - Regex:&#39;.*&#39;    Priority:1# 缩进case标签IndentCaseLabels:false# 缩进宽度IndentWidth:4# 函数返回类型换行时，缩进函数声明或函数定义的函数名IndentWrappedFunctionNames:false# 保留在块开始处的空行KeepEmptyLinesAtTheStartOfBlocks:true# 开始一个块的宏的正则表达式MacroBlockBegin:&#39;&#39;# 结束一个块的宏的正则表达式MacroBlockEnd:&#39;&#39;# 连续空行的最大数量MaxEmptyLinesToKeep:1# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), AllNamespaceIndentation:Inner# 使用ObjC块时缩进宽度ObjCBlockIndentWidth:4# 在ObjC的@property后添加一个空格ObjCSpaceAfterProperty:false# 在ObjC的protocol列表前添加一个空格ObjCSpaceBeforeProtocolList:true# 在call(后对函数调用换行的penaltyPenaltyBreakBeforeFirstCallParameter:19# 在一个注释中引入换行的penaltyPenaltyBreakComment:300# 第一次在&lt;&lt;前换行的penaltyPenaltyBreakFirstLessLess:120# 在一个字符串字面量中引入换行的penaltyPenaltyBreakString:1000# 对于每个在行字符数限制之外的字符的penaltyPenaltyExcessCharacter:1000000# 将函数的返回类型放到它自己的行的penaltyPenaltyReturnTypeOnItsOwnLine:60# 指针和引用的对齐: Left, Right, MiddlePointerAlignment:Left# 允许重新排版注释ReflowComments:true# 允许排序#includeSortIncludes:true# 在C风格类型转换后添加空格SpaceAfterCStyleCast:false# 在赋值运算符之前添加空格SpaceBeforeAssignmentOperators:true# 开圆括号之前添加一个空格: Never, ControlStatements, AlwaysSpaceBeforeParens:ControlStatements# 在空的圆括号中添加空格SpaceInEmptyParentheses:false# 在尾随的评论前添加的空格数(只适用于&#x2F;&#x2F;)SpacesBeforeTrailingComments:2# 在尖括号的&lt;后和&gt;前添加空格SpacesInAngles:true# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格SpacesInContainerLiterals:true# 在C风格类型转换的括号中添加空格SpacesInCStyleCastParentheses:true# 在圆括号的(后和)前添加空格SpacesInParentheses:true# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响SpacesInSquareBrackets:true# 标准: Cpp03, Cpp11, AutoStandard:Cpp11# tab宽度TabWidth:4# 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, AlwaysUseTab:Never<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考文档：</p><ul><li>github官方文档：<a href="https://github.com/rosshemsley/SublimeClangFormat">https://github.com/rosshemsley/SublimeClangFormat</a></li><li>ClangFormatStyleOptions官方注释解释：<a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html">http://clang.llvm.org/docs/ClangFormatStyleOptions.html</a></li><li>clang format插件配置：<a href="https://yjiang.coding.me/20180918-wei-sublime-text-pei-zhi-clang-format/">https://yjiang.coding.me/20180918-wei-sublime-text-pei-zhi-clang-format/</a></li><li>一个还算完整的博客：<a href="https://blog.csdn.net/laojiu_/article/details/70169781">https://blog.csdn.net/laojiu_/article/details/70169781</a></li><li>Clang-Format格式化选项介绍：<a href="https://blog.csdn.net/softimite_zifeng/article/details/78357898">https://blog.csdn.net/softimite_zifeng/article/details/78357898</a></li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言运算符优先级</title>
      <link href="2019/10/06/C-Operator-Precedence/"/>
      <url>2019/10/06/C-Operator-Precedence/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言运算符优先级"><a href="#C语言运算符优先级" class="headerlink" title="C语言运算符优先级"></a>C语言运算符优先级</h1><p>参考<a href="https://zh.cppreference.com/w/c/language/operator_precedence">链接</a><br>conver方式：网页复制到word，word复制到excel，excel复制到<a href="http://pressbin.com/tools/excel_to_html_table/index.html">这里</a><br>方法来自<a href="https://www.zhihu.com/question/50267650">知乎</a></p><table>   <tr>      <td>优先级</td>      <td>运算符</td>      <td>描述</td>      <td>结合性</td>   </tr>   <tr>      <td>1</td>      <td>++, --</td>      <td>后缀自增与自减</td>      <td>从左到右</td>   </tr>   <tr>      <td></td>      <td>()</td>      <td>函数调用</td>      <td></td>   </tr>   <tr>      <td></td>      <td>[]</td>      <td>数组下标</td>      <td></td>   </tr>   <tr>      <td></td>      <td>.</td>      <td>结构体与联合体成员访问</td>      <td></td>   </tr>   <tr>      <td></td>      <td>-></td>      <td>结构体与联合体成员通过指针访问</td>      <td></td>   </tr>   <tr>      <td></td>      <td>(type){list}</td>      <td>复合字面量(C99)</td>      <td></td>   </tr>   <tr>      <td>2</td>      <td>++, --</td>      <td>前缀自增与自减[注 1]</td>      <td>从右到左</td>   </tr>   <tr>      <td></td>      <td>+, -</td>      <td>一元加与减</td>      <td></td>   </tr>   <tr>      <td></td>      <td>!, ~</td>      <td>逻辑非与逐位非</td>      <td></td>   </tr>   <tr>      <td></td>      <td>(type)</td>      <td>类型转型</td>      <td></td>   </tr>   <tr>      <td></td>      <td>*</td>      <td>间接（解引用）</td>      <td></td>   </tr>   <tr>      <td></td>      <td>&</td>      <td>取址</td>      <td></td>   </tr>   <tr>      <td></td>      <td>sizeof</td>      <td>取大小[注 2]</td>      <td></td>   </tr>   <tr>      <td></td>      <td>_Alignof</td>      <td>对齐要求(C11)</td>      <td></td>   </tr>   <tr>      <td>3</td>      <td>*, /, %</td>      <td>乘法、除法及余数</td>      <td>从左到右</td>   </tr>   <tr>      <td>4</td>      <td>+, -</td>      <td>加法及减法</td>      <td></td>   </tr>   <tr>      <td>5</td>      <td><<, >></td>      <td>逐位左移及右移</td>      <td></td>   </tr>   <tr>      <td>6</td>      <td>< <=</td>      <td>分别为 < 与 ≤ 的关系运算符</td>      <td></td>   </tr>   <tr>      <td></td>      <td>>, >=</td>      <td>分别为 > 与 ≥ 的关系运算符</td>      <td></td>   </tr>   <tr>      <td>7</td>      <td>==, !=</td>      <td>分别为 = 与 ≠ 关系</td>      <td></td>   </tr>   <tr>      <td>8</td>      <td>&</td>      <td>逐位与</td>      <td></td>   </tr>   <tr>      <td>9</td>      <td>^</td>      <td>逐位异或（排除或）</td>      <td></td>   </tr>   <tr>      <td>10</td>      <td>|</td>      <td>逐位或（包含或）</td>      <td></td>   </tr>   <tr>      <td>11</td>      <td>&&</td>      <td>逻辑与</td>      <td></td>   </tr>   <tr>      <td>12</td>      <td>||</td>      <td>逻辑或</td>      <td></td>   </tr>   <tr>      <td>13</td>      <td>?:</td>      <td>三元条件[注 3]</td>      <td>从右到左</td>   </tr>   <tr>      <td>14</td>      <td>=</td>      <td>简单赋值</td>      <td></td>   </tr>   <tr>      <td></td>      <td>+=, -=</td>      <td>以和及差赋值</td>      <td></td>   </tr>   <tr>      <td></td>      <td>*=, /=, %=</td>      <td>以积、商及余数赋值</td>      <td></td>   </tr>   <tr>      <td></td>      <td><<= >>=</td>      <td>以逐位左移及右移赋值</td>      <td></td>   </tr>   <tr>      <td></td>      <td>&=, ^=, |=</td>      <td>以逐位与、异或及或赋值</td>      <td></td>   </tr>   <tr>      <td>15</td>      <td>,</td>      <td>逗号</td>      <td>从左到右</td>   </tr></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nowcoder_contest_992F</title>
      <link href="2019/07/21/Nowcoder-contest-992F/"/>
      <url>2019/07/21/Nowcoder-contest-992F/</url>
      
        <content type="html"><![CDATA[<h1 id="吉首大学2019年程序设计竞赛"><a href="#吉首大学2019年程序设计竞赛" class="headerlink" title="吉首大学2019年程序设计竞赛"></a>吉首大学2019年程序设计竞赛</h1><h2 id="F-天花乱坠"><a href="#F-天花乱坠" class="headerlink" title="F 天花乱坠"></a>F 天花乱坠</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>某年某月某日，琪仔get到了一款十分精美的天花板图案的设计图纸。</p><p>图案的框架最初是一个正n边形，之后以它的n条边的中点为顶点构成一个新的正n变形。如此重复多次后，就能得到天花板图案的框架了。</p><p>不要问重复多少次，问就是无限重复。。。</p><p><img src="https://uploadfiles.nowcoder.com/images/20190613/313957_1560420537785_7AC7B87D93F460C1B85D8C851AD70EF9" alt="img"></p><p>给定n，求生成的图案的框架所有边的长度总和(最初正n边形每条边的边长均为100)。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><blockquote><p>多组测试(不多于100组)，每组一行一个整数n( 2 &lt; n &lt;= 100),表示正多边形的边数。</p></blockquote><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><blockquote><p>对于每组测试，输出一行一个结果，四舍五入保留两位小数。(请用较为简洁的计算方式，以减少误差)</p></blockquote><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><blockquote><p>3<br>4<br>50</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><blockquote><p>600.00<br>1365.69<br>2533863.09</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>水题</p><p>这道题需要根据图形来找规律。</p><table><thead><tr><th>n</th><th>第$i$个$n$边形和第$i+1$个$n$边形的边长关系($a_i，a_{i+1}$为边长)</th><th>$\theta$</th></tr></thead><tbody><tr><td>3</td><td>$a_{i+1} = 2*\frac{1}{2}<em>a_i</em>\cos{\theta}$</td><td>$\theta = \frac{\pi}{2} -  \frac{(3-2) \times\pi}{3}\times\frac{1}{2} = \frac{\pi}{3}$</td></tr><tr><td>4</td><td>$a_{i+1} = 2*\frac{1}{2}<em>a_i</em>\cos{\theta}$</td><td>$\theta = \frac{\pi}{2} -  \frac{(4-2) \times\pi}{4}\times\frac{1}{2} = \frac{\pi}{4}$</td></tr><tr><td>5</td><td>$a_{i+1} = 2*\frac{1}{2}<em>a_i</em>\cos{\theta}$</td><td>$\theta = \frac{\pi}{2} -  \frac{(5-2) \times\pi}{5}\times\frac{1}{2} = \frac{\pi}{5}$</td></tr><tr><td>6</td><td>$a_{i+1} = 2*\frac{1}{2}<em>a_i</em> \cos{\theta}$</td><td>$\theta = \frac{\pi}{2} -  \frac{(6-2) \times\pi}{6}\times\frac{1}{2} = \frac{\pi}{6}$</td></tr></tbody></table><p>我们把每条边都写出来，这样就得到了一个等比数列，首项$a_1 = 100$，公比$q = cos\theta$。</p><p>$S_n = a_1 + a_2  + a_3 + \ldots + a_n$</p><p>$S_n = a_1 + a_1 \times q + a_1 \times q^2 + \ldots + a_1 \times q^{n-1}$</p><p>两遍同时乘$q$得</p><p>$q \times S_n = a_1 \times q + a_1 \times q^2 + a_1 \times q^3 + \ldots + a_1 \times q^{n }$</p><p>两式相减，化简得</p><p>$S_n = \frac{a_1 \times (1-q^n)}{1-q}$</p><p>${\lim\limits_{n \to \infty }} S_n = \lim\limits_{n \to \infty}\frac{a_1 \times (1-q^n)}{1-q} = \frac{a_1}{1-q}$</p><p>当然，我们前边求的是边长，要求周长，再乘上$n$即可</p><p>所以结果为：$n \times \frac{a_1}{1-q}$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;bits&#x2F;stdc++.h&gt;&#x2F;&#x2F;#define LOCALusing namespace std;const int maxn &#x3D; 1e5 + 10;typedef long long LL;const double pi &#x3D; acos(-1);void solve()&#123;    int n;    while (cin &gt;&gt; n)    &#123;        double arc &#x3D; pi &#x2F; n;        double a1 &#x3D; 100, q &#x3D; cos(arc);        &#x2F;&#x2F;cout &lt;&lt; &quot;q &#x3D; &quot; &lt;&lt; q &lt;&lt; endl;        double ans &#x3D; a1 &#x2F; (1 - q);        printf(&quot;%.2f\n&quot;, ans * n);    &#125;&#125;int main()&#123;#ifdef LOCAL    freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);    freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);#endif    solve();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hihoCoder 1103 Colorful Lecture Note</title>
      <link href="2019/03/15/hihoCoder-1103/"/>
      <url>2019/03/15/hihoCoder-1103/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://hihocoder.com/problemset/problem/1103">https://hihocoder.com/problemset/problem/1103</a></p><table><thead><tr><th align="left">时间限制</th><th align="left">单点时限</th><th align="left">内存限制</th></tr></thead><tbody><tr><td align="left">10000ms</td><td align="left">1000ms</td><td align="left">256MB</td></tr></tbody></table><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>Little Hi is writing an algorithm lecture note for Little Ho. To make the note more comprehensible, Little Hi tries to color some of the text. Unfortunately Little Hi is using a plain(black and white) text editor. So he decides to tag the text which should be colored for now and color them later when he has a more powerful software such as Microsoft Word.</p><p>There are only lowercase letters and spaces in the lecture text. To mark the color of a piece of text, Little Hi add a pair of tags surrounding the text, <code>&lt;COLOR&gt;</code> at the beginning and <code>&lt;/COLOR&gt;</code> at the end where <code>COLOR</code> is one of “<code>red</code>“, “<code>yellow</code>“ or “<code>blue</code>“.</p><p>Two tag pairs may be overlapped only if one pair is completely inside the other pair. Text is colored by the nearest surrounding tag. For example, Little Hi would not write something like “<code>&lt;blue&gt;aaa&lt;yellow&gt;bbb&lt;/blue&gt;ccc&lt;/yellow&gt;</code>“. However “<code>&lt;yellow&gt;aaa&lt;blue&gt;bbb&lt;/blue&gt;ccc&lt;/yellow&gt;</code>“ is possible and “bbb” is colored blue.</p><p>Given such a text, you need to calculate how many letters(spaces are not counted) are colored red, yellow and blue.</p><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>Input contains one line: the text with color tags. The length is no more than 1000 characters.</p><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>Output three numbers count_red, count_yellow, count_blue, indicating the numbers of characters colored by red, yellow and blue.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><pre class="line-numbers language-none"><code class="language-none">&lt;yellow&gt;aaa&lt;blue&gt;bbb&lt;&#x2F;blue&gt;ccc&lt;&#x2F;yellow&gt;dddd&lt;red&gt;abc&lt;&#x2F;red&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><pre class="line-numbers language-none"><code class="language-none">3 6 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>这是一道练习赛的题目，刚开始看到这道题的时候，没读懂题意，错把<code>letter</code>译为<code>单词</code>，半天没读懂样例，后来重新读题意，发现是单词的意思，瞬间恍然大悟，后来想用搜索dfs来写，因为正好每一次输入都可以分解为若干个子问题，正好符合dfs的套路，但是写了半天后发现，代码不太好写。突然，灵光一现，想到用栈应该是可以处理的(其实最开始就想用栈，但是觉得dfs可能好写，后来发现有些难度)，其实想到用栈大概是因为最近在学数据结构，看到什么东西都想往栈上凑一凑！</p><p>我们可以用栈来存储每种颜色，对于<code>&lt;yellow&gt;aaa&lt;/yellow&gt;</code>这样的表示，我们姑且称左边为<code>左颜色</code>，右边称为<code>右颜色</code>。</p><ul><li>遇到是左颜色格式的，我们入栈，然后用map来映射每种颜色的字母个数，每读到一个字母，就增加对应map的键值。</li><li>读到右颜色的时候，进行出栈操作。</li><li>当栈为空的时候，不做任何操作。</li></ul><h1 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h1><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int maxn &#x3D; 1e5+10;typedef long long ll;int main()&#123;    string s;    getline(cin, s);    int len &#x3D; s.length();    map&lt;string, int&gt; mp;    stack&lt;string&gt; st;    for(int i&#x3D;0;i&lt;len;i++)    &#123;        if(isalpha(s[i]) &amp;&amp; !st.empty())            mp[st.top()]++;        if(s[i]&#x3D;&#x3D;&#39;&lt;&#39; &amp;&amp; s[i+1]!&#x3D;&#39;&#x2F;&#39;)        &#123;            i++;            string temp;            while(s[i]!&#x3D;&#39;&gt;&#39;)                temp +&#x3D; s[i++];            &#x2F;&#x2F;cout&lt;&lt;temp&lt;&lt;endl;            st.push(temp);            while(s[i]!&#x3D;&#39;&lt;&#39;)            &#123;                if(isalpha(s[i]))                    mp[st.top()]++;                i++;            &#125;            i--;        &#125;        if(s[i]&#x3D;&#x3D;&#39;&lt;&#39; &amp;&amp; s[i+1]&#x3D;&#x3D;&#39;&#x2F;&#39;)        &#123;            i +&#x3D; st.top().length()+1;            st.pop();        &#125;    &#125;    printf(&quot;%d %d %d\n&quot;, mp[&quot;red&quot;], mp[&quot;yellow&quot;], mp[&quot;blue&quot;]);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FPGA Quartus Prime 17.0 安装破解</title>
      <link href="2019/03/09/FPGA-install-pojie/"/>
      <url>2019/03/09/FPGA-install-pojie/</url>
      
        <content type="html"><![CDATA[<p>请先通读一遍全文后再开始安装，熟悉步骤，防止误操作。</p><a id="more"></a><h1 id="安装文件准备"><a href="#安装文件准备" class="headerlink" title="安装文件准备"></a>安装文件准备</h1><ul><li>由于安装文件过大，本文直接提供官网下载地址（实测官网下载不用翻墙，可以满速下载），官网提供“直接下载”和“工具下载”两种下载方式，本文使用<code>直接下载</code>方式；</li><li>单独安装<code>Quartus Prime</code>后仍无法使用，需要安装至少一个<code>器件支持包</code>，根据各个人需要下载。<code>课本上用到了Cylone IV</code>。（原博主用到了<code>Cylone IV</code>和<code>Cylone V</code>，所以可以选两个，也可以直选一个，够用就是了)；</li><li>可选“组合下载”和“独立文件”，由于组合文件体积太大，而且实际并不需要用到所有的器件支持包，推荐“<code>独立下载</code>”；</li><li>下载地址：<a href="http://fpgasoftware.intel.com/?edition=standard">http://fpgasoftware.intel.com/?edition=standard</a> //选择<code>Standard</code>、<code>17.0</code>，毕竟国外的网站，打开可能会有点慢。</li></ul><p><img src="/images/all_Image/FPGA_QuartusPrime17.0_install/Intel.png" alt="sum"></p><blockquote><p>注：图片中红线标注的为需要注意的地方，红色框选的为需要下载的文件(Cyclone V可不选)</p></blockquote><h1 id="破解工具准备"><a href="#破解工具准备" class="headerlink" title="破解工具准备"></a>破解工具准备</h1><p><strong>根据个人 Quartus 版本选择对应的破解软件</strong></p><ul><li><a href="https://download.csdn.net/download/ixunmo/10394504">Crack_Quartus_Prime_Standard_Pro_17.0_Windows</a> </li><li><a href="https://download.csdn.net/download/ixunmo/10634824">Modelsim_crack</a></li></ul><h1 id="其他下载方式"><a href="#其他下载方式" class="headerlink" title="其他下载方式"></a>其他下载方式</h1><p>如果不想在<code>Intel</code>官网注册账号(下载安装文件是需要注册Intel账号的)和消耗CSDN积分(下载破解文件是需要CSDN上的C币的)，可以使用我分享的百度网盘链接下载：</p><ul><li>链接：<a href="https://pan.baidu.com/s/11ZzuIlxQBvSIjOkLyvtIZw">https://pan.baidu.com/s/11ZzuIlxQBvSIjOkLyvtIZw</a> </li><li>提取码：w95d </li></ul><p>或者直接把下面链接粘到迅雷等下载器里</p><ul><li>ModelSimSetup-17.0.0.595-windows.exe 大小：1.11GB 链接：<a href="http://download.altera.com/akdlm/software/acdsinst/17.0std/595/ib_installers/ModelSimSetup-17.0.0.595-windows.exe">http://download.altera.com/akdlm/software/acdsinst/17.0std/595/ib_installers/ModelSimSetup-17.0.0.595-windows.exe</a></li><li>QuartusSetup-17.0.0.595-windows.exe 大小：2.19GB 链接：<a href="http://download.altera.com/akdlm/software/acdsinst/17.0std/595/ib_installers/QuartusSetup-17.0.0.595-windows.exe">http://download.altera.com/akdlm/software/acdsinst/17.0std/595/ib_installers/QuartusSetup-17.0.0.595-windows.exe</a><blockquote><p>以上破解资源均是从其他网站得到的，时间较久忘记从何处而来，若有侵犯，联系删除。</p></blockquote></li></ul><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p>  若将 <code>Quartus的安装文件</code>、<code>器件包</code>、<code>ModelSim-Intel FPGA的安装文件</code>放在<strong>同一个文件夹内</strong>，则“<code>QuartusSetup-17.0.0.595-windows.exe”</code>会<strong>自动识别</strong>到“<code>ModelSimSetup-17.0.0.595-windows.exe</code>”和“<code>cyclonev-17.0.0.595.qdz</code>”，即<strong>只需双击“QuartusSetup-17.0.0.595-windows.exe”进行安装</strong>，在安装过程中勾选附加安装选项便可（列表中的ModelSim-Intel FPGA Starter Edition是免费版本的ModelSim-IntelFPGA，若不想费力破解ModelSim，则勾选此项，否则<strong>勾选ModelSim-Intel FPGA Edition</strong>）</p><p><strong>注意：安装时，默认的安装路径为<code>C:\intelFPGA\17.0\ </code>，只需要把<code>C</code>改为<code>D</code>即可，也就是改成<code>D:\intelFPGA\17.0\ </code>。</strong></p><blockquote><p>推荐勾选ModelSim-Intel FPGA Edition，既然选择了破解版，就一条路走到底吧。</p></blockquote><h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><h2 id="Quartus-Prime破解"><a href="#Quartus-Prime破解" class="headerlink" title="Quartus Prime破解"></a>Quartus Prime破解</h2><p>这一步破解，请参考破解文件夹的<code>读我.txt</code>，并结合下文。</p><p>本文以<code>Windows Quartus Prime Standard 17.0.0.595</code>，安装路径 <code>D:\intelFPGA\17.0\ </code>为例： </p><ol><li>用<code>Quartus_Prime_Standard_17.0_破解器.exe</code>破解<code>D:\intelFPGA\17.0\quartus\bin64下</code>的<code>sys_cpt.dll</code>文件； </li><li>把<code>license.dat</code>里的<code>XXXXXXXXXXXX </code>用自己的<strong>网卡号</strong>替换(后文有网卡号获取方式)； </li><li>接下来的步骤参考下文的<strong>网卡号获取方式</strong>。</li><li>至此结束。</li></ol><blockquote><p>注意：license.dat文件存放的路径名称不能包含汉字和空格，空格可以用下划线代替。</p></blockquote><p>常见破解问题：<br>- 破解器被禁止访问dll文件或者找不到dll文件<br>Quartus没有被关闭或者没有被彻底关闭，解决方法是关闭之或者杀死还在运行的和Quartus有关的进程</p><h3 id="网卡号获取方式"><a href="#网卡号获取方式" class="headerlink" title="网卡号获取方式"></a>网卡号获取方式</h3><ul><li>在破解之前，安装好之后，打开桌面上的<code>Quartus (Quartus Prime 17.0) Standard Edition</code>，然后他会让你选择<code>License</code>，选择最后一项<code>if you have a valid license file ，specify  the location of you license file</code>。</li><li>进入License Setup界面，复制 <code>NIC id</code>，图中红框部分，右键，全选，复制即可。<img src="/images/all_Image/FPGA_QuartusPrime17.0_install/NIC_ID.png" alt="NIC_ID"></li><li>记事本方式打开crakc内的license.dat,记录好6个<code>HOSTID=XXXXXXXXXXXX</code>，将复制好的<code>NIC id</code>替换<code>XXXXXXXXXXXX</code>，并保存。(替换的快捷键为<code>Ctrl</code>+<code>H</code>)<img src="/images/all_Image/FPGA_QuartusPrime17.0_install/license_dat.png"></li><li>在license file 选项框，选择刚刚修改好的<code>license.dat</code>文件。（<strong>license文件存放的路径名称不能包含汉字和空格，空格可以用下划线代替）</strong><img src="/images/all_Image/FPGA_QuartusPrime17.0_install/license_file.png"></li><li>确认选择好后，点ok，这样就好了。</li></ul><h2 id="ModelSim-IntelFpga-破解"><a href="#ModelSim-IntelFpga-破解" class="headerlink" title="ModelSim - IntelFpga 破解"></a>ModelSim - IntelFpga 破解</h2><p>这一步不用参考<code>modlsim破解.docx</code>这个文档，按照以下步骤即可，如果下边的步骤失败，再查看<code>modlsim破解.docx</code>文档查错。</p><p>本文<code>ModelSim</code>安装路径为 <code>D:\intelFPGA\17.0\</code> . </p><ol><li>解压破解工具，将解压的文件<code>MentorKG.exe</code>和<code>patch_dll.bat</code> 一起拷贝到<code>D:\intelFPGA\17.0\modelsim_ae\win32aloem</code>下； </li><li>双击批处理文件<code>patch_dll.bat</code>，大概5秒后，将生成的TXT文本文件直接另存为，命名为<code>LICENSE.TXT</code>，保存路径自选，本文完整路径为 <code>D:\intelFPGA\17.0\modelsim_ae\LICENSE.TXT</code>； </li><li>添加系统变量： <br>桌面上的计算机(Win10为此电脑)右键:<code>属性</code>–<code>高级系统设置</code>–<code>环境变量</code>，上面的是用户变量，我们只需要在下面的<code>系统变量</code>添加即可。 点击<code>新建</code>，出现对话框，变量名为<code>MGLS_LICENSE_FILE</code>，变量值为<code>D:\intelFPGA\17.0\modelsim_ae\LICENSE.TXT</code>(就是你的LICENSE.TXT存放路径)； </li><li>至此结束；</li></ol><blockquote><p>注意：Modelsim的安装路径不能有中文，需全是英文<br>设置环境变量时，注意拼写，license文件的路径最好复制，以免出错</p></blockquote><h2 id="更新：ModelSim无法使用的问题"><a href="#更新：ModelSim无法使用的问题" class="headerlink" title="更新：ModelSim无法使用的问题"></a>更新：ModelSim无法使用的问题</h2><p>  在<code>Quartus</code>中调用<code>ModelSim</code>仿真时，需为<code>Quartus</code>指定<code>ModelSim的</code>安装位置，设置方法如下图：</p><p><img src="/images/all_Image/FPGA_QuartusPrime17.0_install/Tools_Options.png" alt="set1"></p><p><img src="/images/all_Image/FPGA_QuartusPrime17.0_install/ModelSim_Altera.png" alt="set2"></p><blockquote><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/ixunmo/article/details/79338650">Quartus17.0 + ModelSim - IntelFpga安装及破解</a></li><li><a href="https://www.jb51.net/softjc/629957.html">Quartus Prime 18 Pro专业破解版安装+许可证文件激活图文详细教程</a></li></ul><p>如有侵权，请联系我删除。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux VPS Speedtest</title>
      <link href="2019/02/20/Linux-Speedtest/"/>
      <url>2019/02/20/Linux-Speedtest/</url>
      
        <content type="html"><![CDATA[<p>VPS一键检测IO、配置信息等问题检测脚本改良，丰富配置信息的展现、IO速度、以及下载速度检测点也是国内节点。同时可以生成<code>speedtest.net</code>的测速报告和<code>ubuntu paste</code>结果。</p><h1 id="脚本下载地址"><a href="#脚本下载地址" class="headerlink" title="脚本下载地址"></a>脚本下载地址</h1><ul><li>官方地址<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;oooldking&#x2F;script&#x2F;master&#x2F;superbench.shchmod +x superbench.sh.&#x2F;superbench.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>备用地址<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget https:&#x2F;&#x2F;soft.laozuo.org&#x2F;scripts&#x2F;superbench.shchmod +x superbench.sh.&#x2F;superbench.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>之后再想测速的话，直接在<code>root</code>目录运行<code>superbench.sh</code>这个脚本即可，命令如下：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sh superbench.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>建议先用官方的地址，因为可能会存在更新或者其他功能升级问题。</li></ol><p>从测试结果我们可以看到比teddysun提供的丰富一些，可以测试到架构、IO分三个等级测试、以及测速下载节点是用的随机国内节点。</p><blockquote><p>参考链接：<a href="http://www.laozuo.org/11138.html">http://www.laozuo.org/11138.html</a></p></blockquote><p>如果只需要测速的话，可以参考如下链接：<a href="http://www.laozuo.org/11078.html">http://www.laozuo.org/11078.html</a></p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> speedtest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+Github搭建博客和美化</title>
      <link href="2019/02/17/Hexo-Github-Blog-Help/"/>
      <url>2019/02/17/Hexo-Github-Blog-Help/</url>
      
        <content type="html"><![CDATA[<p>本站配置：//Date: 2019-02-17</p><ul><li><p><a href="https://hexo.io/">Hexo</a> v3.8.0</p></li><li><p>Theme – <a href="https://theme-next.org/">NexT.Pisces</a> v6.7.0</p></li><li><p>Scheme - Pisces</p></li></ul><p>hexo+Github搭建博客的教程网上有很多了，初次搭建，可参考知乎上的一篇教程</p><p><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a> //<strong>强烈推荐！！！</strong></p><a id="more"></a><p>本文主要记录我在使用hexo的时候，从网上搜集的一些方法，整理了一下，写成博客，内容大多从网络上转载过来的，有些图省事，直接搬了过来，大多数都标记了出处，如有侵权，请<a href="mailto:yourname@gmail.com">联系</a>我删除。</p><h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><h2 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h2><h3 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h3><p>修改<code>custom.styl</code> 文件，添加以下代码。位置：<code>themes/next/source/css/_custom/custom.styl</code></p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus">&#x2F;&#x2F; 主页文章添加阴影效果 .post &#123;   margin-top: 60px;   margin-bottom: 60px;   padding: 25px;   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="首页不显示全文-只显示预览"><a href="#首页不显示全文-只显示预览" class="headerlink" title="首页不显示全文(只显示预览)"></a>首页不显示全文(只显示预览)</h3><ul><li><p>打开主题配置文件<code>/themes/next/_config.yml</code>，将<code>auto_excerpt</code>下面的<code>enable:</code>的值，改成<code>true</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt:enable: truelength: 150<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>除了这个方法，还有一个更灵活的方法，直接在编辑的文章中添加<code>&lt;!--more--&gt;</code>标记。这样只会显示<code>&lt;!--more--&gt;</code>标记之前的那部份。</p></blockquote></li></ul><h3 id="显示阅读百分比"><a href="#显示阅读百分比" class="headerlink" title="显示阅读百分比"></a>显示阅读百分比</h3><ul><li><p>打开<code>themes/next/_config.yml</code>主题配置文件,找到<code># Scroll percent label in b2t button</code>将<code>scrollpercent:</code>的值,改成<code>true</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Scroll percent label in b2t button  scrollpercent: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="设置「阅读全文」"><a href="#设置「阅读全文」" class="headerlink" title="设置「阅读全文」"></a>设置「阅读全文」</h3></li></ul><p>NexT 提供三种方式来控制文章在首页的显示方式。 也就是说，在首页显示文章的摘录并显示 <strong>阅读全文</strong> 按钮，可以通过以下方法：</p><ol><li><p>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式 推荐</p></li><li><p>在文章的 <a href="https://hexo.io/docs/front-matter.html">front-matter</a> 中添加 <code>description</code>，并提供文章摘录</p></li><li><p>自动形成摘要，在 主题配置文件 中添加：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">auto_excerpt:  enable: true  length: 150<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认截取的长度为 <code>150</code> 字符，可以根据需要自行设定</p></li></ol><p>建议使用 <code>&lt;!-- more --&gt;</code>（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p><h3 id="如何更改内容区域的宽度？Scheme-Pisces专用"><a href="#如何更改内容区域的宽度？Scheme-Pisces专用" class="headerlink" title="如何更改内容区域的宽度？Scheme Pisces专用"></a>如何更改内容区域的宽度？Scheme Pisces专用</h3><p>对于 Pisces Scheme，需要同时修改 <code>header</code> 的宽度、<code>.main-inner</code> 的宽度以及 <code>.content-wrap</code> 的宽度。例如，使用百分比（Pisces 的布局定义在 <code>source/css/_schemes/Picses/_layout.styl</code> 中）：</p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus">header&#123; width: 90%; &#125;.container .main-inner &#123; width: 90%; &#125;.content-wrap &#123; width: calc(100% - 260px); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我并未对这个布局进行测试，自定义修改需要自己进行测试。另外，我觉得超过一定宽度后（一行内文字太多导致换行跨度太大），阅读体验都不怎么样。</p><h2 id="顶部"><a href="#顶部" class="headerlink" title="顶部"></a>顶部</h2><h3 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h3><ul><li>打开<code>themes/next/_config.yml</code>主题配置文件，将<code>pace:</code>的值,改成<code>true</code></li></ul><p>还可以将<code>pace_theme:</code>的值，改成相应的名字,变更不同样式的加载条。</p><h3 id="实现fork-me-on-github"><a href="#实现fork-me-on-github" class="headerlink" title="实现fork me on github"></a>实现fork me on github</h3><ul><li><p>点击<a href="https://github.com/blog/273-github-ribbons">这里</a>或者<a href="http://tholman.com/github-corners">这里</a>挑选自己喜欢的样式， 复制代码</p></li><li><p>在<a href="http://tool.oschina.net/codeformat/html">这里</a>把代码格式化</p></li><li><p>粘贴刚才复制的代码到<code>themes/next/layout/_layout.swig</code>文件中，放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面，并把<code>href</code>改为你的github地址，当然，也可以是其他地址。</p></li></ul><h2 id="底部"><a href="#底部" class="headerlink" title="底部"></a>底部</h2><h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>这个时间将在站点的底部显示，例如 <code>© 2013 - 2015</code>。 编辑 主题配置文件，新增字段 <code>since</code>。</p><p>配置示例</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">since: 2013<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="小东西"><a href="#小东西" class="headerlink" title="小东西"></a>小东西</h2><h3 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h3><ul><li><p>打开<code>themes/next/source/css/_custom/custom.styl</code>,在里面添加如下代码：</p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus">&#x2F;&#x2F; 鼠标样式  * &#123;      cursor: url(&quot;https:&#x2F;&#x2F;blog-1251102893.cos.ap-shanghai.myqcloud.com&#x2F;blog&#x2F;pointer2.png&quot;),auto!important  &#125;  :active &#123;      cursor: url(&quot;https:&#x2F;&#x2F;blog-1251102893.cos.ap-shanghai.myqcloud.com&#x2F;blog&#x2F;pointer.png&quot;),auto!important  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中url里面必须是ico图片，ico图片可以上传到网上，然后获取外链，复制到url里就行了。</p><p>小技巧：二个ICO图标可以设置成一大一小。这样点击起来，就会有动画效果了。</p></li></ul><h3 id="各区域动态载入效果"><a href="#各区域动态载入效果" class="headerlink" title="各区域动态载入效果"></a>各区域动态载入效果</h3><ul><li><p>编辑<code>themes/netx/_config.yml</code>找到<code>motion</code>,将<code>enable</code>的值，改成<code>true</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Use velocity to animate everything.motion:  enable: true  async: false  transition:    # Transition variants:    # fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut    post_block: fadeIn #主页载入效果    post_header: bounceRightIn #文章标题载入效果    post_body: slideDownIn    coll_header: bounceLeftIn    # Only for Pisces | Gemini.    sidebar: bounceLeftIn #侧边栏载入效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>#</code>号里都是载入效果，可以自行尝试。</p></li></ul><h3 id="美化右侧滚动条"><a href="#美化右侧滚动条" class="headerlink" title="美化右侧滚动条"></a>美化右侧滚动条</h3><ul><li><p>打开<code>themes\next\source\css\_custom\custom.styl</code>文件，将下面的代码添加进去。</p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus">&#x2F;&#x2F;设置滚动条的样式&#x2F;&#x2F;参考https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000003708894::-webkit-scrollbar &#123;      width: 5px;      height: 5px;&#125;&#x2F;&#x2F;滚动槽::-webkit-scrollbar-track &#123;      background: #eee;&#125;&#x2F;&#x2F;滚动条滑块::-webkit-scrollbar-thumb &#123;      border-radius: 5px;        background-color: #ccc;&#125;::-webkit-scrollbar-thumb:hover &#123;      background-color: rgb(247, 149, 51);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化选择的文字样式"><a href="#优化选择的文字样式" class="headerlink" title="优化选择的文字样式"></a>优化选择的文字样式</h3></li><li><p>打开<code>themes\next\source\css\_custom\custom.styl</code>文件，将下面的代码添加进去。</p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus">::selection &#123;      background-color: rgb(255, 241, 89);        color: #555;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="点击出现桃心效果"><a href="#点击出现桃心效果" class="headerlink" title="点击出现桃心效果"></a>点击出现桃心效果</h3></li><li><p>打开<a href="https://blog-1251102893.cos.ap-shanghai.myqcloud.com/blog/love.js">love.js</a>网站，然后将里面的代码copy一下，新建<code>love.js</code>文件并且将代码粘贴进去，然后保存。</p></li><li><p>将<code>love.js</code>文件放到路径<code>themes/next/source/js/src</code>里面，然后打开<code>themes/next/layout/_layout.swig</code>文件,在末尾（在前面引用会出现找不到的bug）<br>添加以下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 页面点击小红心 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/src/love.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h1></li></ul><h2 id="分类和标签显示-tags-categories"><a href="#分类和标签显示-tags-categories" class="headerlink" title="分类和标签显示(tags, categories)"></a>分类和标签显示(tags, categories)</h2><ol><li><p>新建一个页面，命名为<code>tags</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑新建的<code>index.md</code>文档，这个<code>index.md</code>存在<strong>站点</strong>的<code>source\tags</code>目录下。</p><pre class="line-numbers language-none"><code class="language-none">---title: TagCloud #这个是tags页面的标题type: tagslayout: &quot;tags&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：如果启用评论功能，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">---title: TagCloud #这个是tags页面的标题type: tagslayout: &quot;tags&quot;comments: false---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>menu</code>中打开，编辑<strong>主题</strong>配置文件<code>_config.yml</code>，添加<code>tags</code>到<code>menu</code>下，说白了就是把注释删掉。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">menu:  home: &#x2F; || home  tags: &#x2F;tags&#x2F; || tags  archives: &#x2F;archives&#x2F; || archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>categories</code>的设置类似，把对应的<code>tags</code>改成<code>categories</code>即可。</p><p><code>index.md</code>文档中的<code>title</code>后边的字段可以自定义。</p></blockquote></li></ol><h2 id="添加RSS订阅"><a href="#添加RSS订阅" class="headerlink" title="添加RSS订阅"></a>添加RSS订阅</h2><ul><li><p>安装RSS插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑<strong>主题</strong>配置文件<code>_config.yml</code>，添加以下代码开启</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#rss feedfeed:    type: atom    path: atom.xml    limit: 5    hub:    content: &#39;true&#39;    content_limit:    content_limit_delim: &#39; &#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数的含义：</p></li><li><p><code>type</code>: <code>RSS</code>的类型(<code>atom/rss2</code>)</p></li><li><p><code>path</code>: 文件路径,默认是<code>atom.xml/rss2.xml</code></p></li><li><p><code>limit</code>: 展示文章的数量,使用<strong>0</strong>或则<strong>false</strong>代表展示全部</p></li><li><p><code>hub</code>:</p></li><li><p><code>content</code>: 在<code>RSS</code>文件中是否包含内容 ,有3个值 <code>true/false</code>默认不填为<code>false</code></p></li><li><p><code>content_limit</code>: 指定内容的长度作为摘要,仅仅在上面<code>content</code>设置为<code>false</code>和<code>没有自定义的描述出现</code></p></li><li><p><code>content_limit_delim</code>: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.</p></li></ul><blockquote></blockquote><h2 id="友情链接Blog-rolls"><a href="#友情链接Blog-rolls" class="headerlink" title="友情链接Blog rolls"></a>友情链接Blog rolls</h2><ul><li><p>编辑文件<code>themes/next/_config.yml</code>，找到<code># Blog rolls</code>修改成下面的样子就OK了。(links里面写你想要的链接):</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Blog rollslinks_icon: linklinks_title: Linkslinks_layout: block#links_layout: inlinelinks:  Title: http:&#x2F;&#x2F;example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2></li></ul><p>Sidebar Avatar</p><ul><li><p>修改文件<code>themes/next/_config.yml</code>，找到<code>avatar</code>，修改成如下格式即可，<code>url</code>可以是一个网络链接，也可以是本地图片，具体格式看注释。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Sidebar Avataravatar:  # in theme directory(source&#x2F;images): &#x2F;images&#x2F;avatar.gif  # in site  directory(source&#x2F;uploads): &#x2F;uploads&#x2F;avatar.gif  # You can also use other linking images.  url: https:&#x2F;&#x2F;blog-1251102893.cos.ap-shanghai.myqcloud.com&#x2F;avatar.jpg  # If true, the avatar would be dispalyed in circle.  rounded: true  # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.  opacity: 1  # If true, the avatar would be rotated with the cursor.  rotated: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="联系方式及社交链接"><a href="#联系方式及社交链接" class="headerlink" title="联系方式及社交链接"></a>联系方式及社交链接</h2></li><li><p>修改<code>themes/next/_config.yml</code>站点配置文件，找到<code># Social Links</code>,将<code>social:</code>下面对应的<code>#</code>号去掉。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Social Links# find other icon : https:&#x2F;&#x2F;fontawesome.com&#x2F;cheatsheet?from&#x3D;iosocial:  GitHub: https:&#x2F;&#x2F;github.com&#x2F;yourname || github  E-Mail: mailto:yourname@gmail.com || envelope  Weibo: https:&#x2F;&#x2F;weibo.com&#x2F;yourname || weibo  #Google: https:&#x2F;&#x2F;plus.google.com&#x2F;yourname || google  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || twittersocial_icons:  enable: true  icons_only: false  transition: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h2></li></ul><p>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。</p><ol><li><p>链接放置在 <code>social</code> 字段下，一行一个链接。其键值格式是 <code>显示文本: 链接地址</code>。</p><p>配置示例</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Social linkssocial:  GitHub: https:&#x2F;&#x2F;github.com&#x2F;your-user-name  Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;your-user-name  微博: http:&#x2F;&#x2F;weibo.com&#x2F;your-user-name  豆瓣: http:&#x2F;&#x2F;douban.com&#x2F;people&#x2F;your-user-name  知乎: http:&#x2F;&#x2F;www.zhihu.com&#x2F;people&#x2F;your-user-name  # 等等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设定链接的图标，对应的字段是 <code>social_icons</code>。其键值格式是 <code>匹配键: Font Awesome 图标名称</code>， <code>匹配键</code> 与上一步所配置的链接的 <code>显示文本</code> 相同（大小写严格匹配），<code>图标名称</code> 是 Font Awesome 图标的名字（不必带 <code>fa-</code> 前缀）。<code>enable</code> 选项用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p><p>配置示例</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Social Iconssocial_icons:  enable: true  # Icon Mappings  GitHub: github  Twitter: twitter  微博: weibo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h2></li></ol><p>腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！效果click <a href="https://5chenglin.github.io/404.html">here</a></p><p>使用方法，新建 404.html 页面，放到<strong>主题</strong>的 <code>source</code> 目录下，内容如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html;charset=utf-8;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge,chrome=1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://qzone.qq.com/gy/404/style/404style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/plain<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.qq.com/404/search_children.js<span class="token punctuation">"</span></span>          <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">homePageUrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span>          <span class="token attr-name">homePageName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>回到我的主页<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://qzone.qq.com/gy/404/data.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://qzone.qq.com/gy/404/page.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文章界面"><a href="#文章界面" class="headerlink" title="文章界面"></a>文章界面</h1><h2 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h2><p>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow Theme</a> 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 <code>normal</code> 主题，可选的值有 <code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code>：</p><table><thead><tr><th><img src="https://theme-next.iissnan.com/assets/img/tomorrow.png" alt="img"></th><th><img src="https://theme-next.iissnan.com/assets/img/tomorrow-night.png" alt="img"></th><th><img src="https://theme-next.iissnan.com/assets/img/tomorrow-night-blue.png" alt="img"></th><th><img src="https://theme-next.iissnan.com/assets/img/tomorrow-night-bright.png" alt="img"></th><th><img src="https://theme-next.iissnan.com/assets/img/tomorrow-night-eighties.png" alt="img"></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>更改 <code>highlight_theme</code> 字段，将其值设定成你所喜爱的高亮主题，例如：</p><p>高亮主题设置示例</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Code Highlight theme# Available value: normal | night | night eighties | night blue | night bright# https:&#x2F;&#x2F;github.com&#x2F;chriskempson&#x2F;tomorrow-themehighlight_theme: normal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图片放大预览Fancybox"><a href="#图片放大预览Fancybox" class="headerlink" title="图片放大预览Fancybox"></a>图片放大预览Fancybox</h2><p>参考fancybox文档即可</p><p>There is support for old version 2 and new version 3.</p><p>Choose only any one variant, do not need to install both.</p><ul><li><p>To install 2.x: <a href="https://github.com/theme-next/theme-next-fancybox">https://github.com/theme-next/theme-next-fancybox</a></p></li><li><p>To install 3.x: <a href="https://github.com/theme-next/theme-next-fancybox3">https://github.com/theme-next/theme-next-fancybox3</a></p></li></ul><h2 id="修改文章底部-标签"><a href="#修改文章底部-标签" class="headerlink" title="修改文章底部# 标签"></a>修改文章底部<code>#</code> 标签</h2><p>修改<strong>主题</strong>配置文件，位置：<code>/themes/next/layout/_macro/post.swig</code></p><ol><li><p>搜索 <code>rel=&quot;tag&quot;&gt;#</code>。</p></li><li><p>将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>。</p></li><li><p>可以换成自己喜欢的图标，更改 <code>fa fa-tag</code> 中的<code>tag</code>即可，比如，可以改成<code>fa fa-heart</code>。</p><blockquote><p>更多icon图标：<a href="https://fontawesome.com/v4.7.0/icons/">Font Awesome</a>。</p></blockquote></li></ol><h2 id="结尾添加“本文结束”标记"><a href="#结尾添加“本文结束”标记" class="headerlink" title="结尾添加“本文结束”标记"></a>结尾添加“本文结束”标记</h2><ul><li><p>在路径<code>themes/next/layout/_macro</code>中新建<code>passage-end-tag.swig</code>文件,并添加以下内容：</p><pre class="line-numbers language-django" data-language="django"><code class="language-django">&lt;div&gt;    &#123;% if not is_index %&#125;        &lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;            -------------本文结束            &lt;i class&#x3D;&quot;fa fa-paw&quot;&gt;&lt;&#x2F;i&gt;            感谢您的阅读-------------        &lt;&#x2F;div&gt;    &#123;% endif %&#125;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接着打开<code>themes/next/layout/_macro/post.swig</code>文件，在<code>post-body</code>之后，<code>post-footer</code>之前添加如下代码,(大概在350行左右的位置)：</p><pre class="line-numbers language-django" data-language="django"><code class="language-django">&lt;div&gt;  &#123;% if not is_index %&#125;    &#123;% include &#39;passage-end-tag.swig&#39; %&#125;  &#123;% endif %&#125;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后打开主题配置文件<code>_config.yml</code>,在末尾添加</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># 文章末尾添加“本文结束”标记passage_end_tag:  enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2></li><li><p>修改文件<code>themes/next/source/css/_common/components/post/post.styl</code>，在末尾添加如下<code>css</code>样式：</p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus">&#x2F;&#x2F; 文章内链接文本样式.post-body p a&#123;  color: #0593d3;  border-bottom: none;  border-bottom: 1px solid #0593d3;  &amp;:hover &#123;    color: #fc6423;    border-bottom: none;    border-bottom: 1px solid #fc6423;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中选择<code>.post-body</code>是为了不影响标题，选择<code>p</code>是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p></blockquote></li></ul><h1 id="编辑、推送"><a href="#编辑、推送" class="headerlink" title="编辑、推送"></a>编辑、推送</h1><h2 id="不处理’source’目录的个别文件"><a href="#不处理’source’目录的个别文件" class="headerlink" title="不处理’source’目录的个别文件"></a>不处理’source’目录的个别文件</h2><blockquote><p>有时候我们对某些文件不需要进行 hexo 博客主题渲染，需要过滤。</p></blockquote><p>编辑<strong>站点</strong>配置文件 <code>_config.yml</code>，搜索 <code>skip_render</code> 字段，修改相关内容来设置忽略的目录，具体如下：(文件匹配是基于正则匹配的)</p><ol><li>单个文件夹下全部文件：skip_render: demo/*</li><li>单个文件夹下指定类型文件：skip_render: demo/*.html</li><li>单个文件夹下全部文件以及子目录:skip_render: demo/**</li><li>多个文件夹以及各种复杂情况：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">skip_render:   - &#39;demo&#x2F;*.html&#39;   - &#39;demo&#x2F;**&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="添加文章时，自动打开markdown编辑器"><a href="#添加文章时，自动打开markdown编辑器" class="headerlink" title="添加文章时，自动打开markdown编辑器"></a>添加文章时，自动打开markdown编辑器</h2><p>找到博客根目录，打开scripts活页夹(没有的话，自己创建一个)。</p><p>创建一个JavaScript文件，可任意命名。</p><p>打开所创建的JavaScript文件，输入以下内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment">//根据自己安装的hexo版本选择</span><span class="token comment">// Hexo 2.x 复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start "" "markdown编辑器绝对路径" '</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hexo 3 复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start "" "markdown编辑器绝对路径" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: markdown编辑器绝对路径 格式为(例如打开Typora)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:\\Program Files\\Typora\\Typora.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>来源： <a href="https://www.jianshu.com/p/3a01cc514ce7">https://www.jianshu.com/p/3a01cc514ce7</a></p><p>参考：<a href="https://github.com/hexojs/hexo/issues/1007">hexo Github issue</a>  <a href="https://notes.doublemine.me/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html">Hexo添加文章时自动打开编辑器</a> </p></blockquote><h1 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h1><h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><p>注意： baidu_analytics 不是你的百度 id 或者 百度统计 id</p><ol><li>登录 <a href="http://tongji.baidu.com/#http">百度统计</a>， 定位到站点的代码获取页面</li><li>复制 <code>hm.js?</code> 后面那串统计脚本 id，如：<img src="http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png" alt="img"></li><li>编辑 主题配置文件， 修改字段 <code>baidu_analytics</code> 字段，值设置成你的百度统计脚本 id。</li></ol><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><h2 id="推荐工具："><a href="#推荐工具：" class="headerlink" title="推荐工具："></a>推荐工具：</h2><ul><li>Visual Studio Code，用于管理blog所有文件。</li><li>Typora，用于编辑Markdown文档。</li><li>腾讯云COS，内容存储服务，用于图床文件的存储，实现CDN加速。</li></ul><h2 id="npm访问速度慢问题："><a href="#npm访问速度慢问题：" class="headerlink" title="npm访问速度慢问题："></a>npm访问速度慢问题：</h2><p>只需要使用–registry参数指定镜像服务器地址，为了避免每次安装都需要–registry参数，可以使用如下命令进行永久设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>换了国内镜像，npm安装速度就很快了.</p><h2 id="npm离线安装："><a href="#npm离线安装：" class="headerlink" title="npm离线安装："></a>npm离线安装：</h2><ul><li>找到对应插件GitHub地址，download</li><li>解压，把文件夹放到安装目录下<code>C:\Users\zhuom\.atom\packages</code></li><li>win + R ，cmd，<code>cd .atom\packages\xxx</code> <code>xxx</code>为对应的插件文件夹名称。</li><li><code>npm install</code>即可。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a> //强烈推荐！</li><li><a href="https://zealot.top/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A22.html">Hexo-Github搭建自己的博客 — 心得汇总2018版（主题配置篇）</a></li><li><a href="http://theme-next.iissnan.com/third-party-services.html#algolia-search">第三方服务集成 - NexT 使用文档</a> //评论、统计、搜索等服务</li><li><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud">为NexT主题添加文章阅读量统计功能 | Doublemine</a> //LeanCloud配置</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 解决CentOS改DNS，重启失效问题</title>
      <link href="2019/01/25/Linux-CentOS-DNS/"/>
      <url>2019/01/25/Linux-CentOS-DNS/</url>
      
        <content type="html"><![CDATA[<p>解决在CentOS上改DNS，重启网络配置后又恢复原样的问题</p><p>直接修改<code>/etc/resolv.conf</code>不行，因为一重启network就会恢复原来状态。</p><p>必须要在<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>里面最后加上dns的设置。</p><p>要不然，重启后，肯定使用eth0设置中没有设dns的相关信息，使<code>/etc/resolv.conf</code>恢复到原来的状态。</p><p>具体操作如下：</p><pre class="line-numbers language-none"><code class="language-none">$ vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改成下面这个样子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DEVICE&#x3D;&quot;eth0&quot;TYPE&#x3D;&quot;Ethernet&quot;UUID&#x3D;&quot;3b5xxc-6xx9-4xx69-9xx6-xxc8xxe5xx52&quot;ONBOOT&#x3D;&quot;yes&quot;NM_CONTROLLED&#x3D;&quot;yes&quot;BOOTPROTO&#x3D;noneIPADDR&#x3D;xx.xx.xx.xxNETMASK&#x3D;&quot;255.255.255.0&quot;GATEWAY&#x3D;xx.xx.xx.xxBROADCAST&#x3D;&quot;xx.xx.xx.xx&quot;PREFIX&#x3D;24DEFROUTE&#x3D;yesIPV4_FAILURE_FATAL&#x3D;yesIPV6INIT&#x3D;noNAME&#x3D;&quot;System eth0&quot;DNS1&#x3D;x.x.x.x #114.114.114.114DNS2&#x3D;x.x.x.x #8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样设置后/etc/resolv.conf里面根本就不需要设置。</p><p>重启</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ service network restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以发现/etc/resolv.conf里面就有两个dns的解析ip了。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat &#x2F;etc&#x2F;resolv.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HDU Magic Maze ZZULI09F</title>
      <link href="2019/01/23/HDU-Magic-Maze-ZZULI09F/"/>
      <url>2019/01/23/HDU-Magic-Maze-ZZULI09F/</url>
      
        <content type="html"><![CDATA[<p>郑州轻工业学院首届“瑞琪杯”大学生程序设计大赛 F 1006</p><p>HDU Virtual Contest 可以找到原题<br>迷宫bfs，求步数最少，多了一个跳跃的判断，题意有点模糊。</p><a id="more"></a><p>Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 1 Accepted Submission(s): 1</p><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>天外来客 likes playing computer game very much. Recently, he is playing a RPG game called “仙剑奇侠传4”. But when he was playing the game, he meets a very mad problem. There are so many mazes in the game and CHN was not good at passing the mazes. So he is very unhappy these days. Can you help him?<br>Here is a magic maze. When one person stands on a position(x0, y0), he can choose to jump to the other one position(x1, y1), which has a relation with the position(x0, y0). <strong>One position can have only one relation.（这里似乎有问题？？？）</strong> One person can move left, right, up or down. One move or one jump will take one minute.<br>There are only have ‘.’ or ‘#’, ’S’, ’E’ on the map of the magic maze. ’.’ indicates the blank which person can move on, ‘#’ indicates wall. Maybe a blank have relation of a wall. ’S’ indicates the entrance location. ‘E’ indicates the exit location . There is only one ‘S’ and one ‘E’.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line is an integer t, which means the number of test case in the data file. For each test case, the first line consist of two integer r (2&lt;=r&lt;=20) and c (2&lt;=c&lt;20), which mean the number of rows or columns. The next r line is the map’s description; each line consists of c letters. The next line is an integer k (0&lt;=k&lt;=(r*c)/2), which mean the relations of two position. The next k lines, each line consist of four integers x1, y1, x2, y2, which means (x1,y1) has a relation with (x2, y2) and (x2, y2) also has a relation with (x1, y1).<br>(0&lt;=x1,x2=&lt;r-1,0&lt;=y1,y2&lt;=c-1)<br>You can jump from one position to another.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each test case, you only outputs the Minimum time that one person will take from the entrance location to the exit location. If he can’t find the exit position, you must output ‘-1’.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre class="line-numbers language-none"><code class="language-none">16 6S..#.....#.....#...#.#.....#.#.....E31 2 4 40 1 4 50 0 4 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>BFS水题，看错题了，gg。</p><h3 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a>Codes</h3><p>AC代码</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma warning(disable:4996)#include &lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;&#x2F;&#x2F;#define LOCALusing namespace std;const int maxn &#x3D; 200 + 10;typedef long long ll;int k[maxn][4];char a[maxn][maxn];bool vis[maxn][maxn];int r, c;int sx, sy, ex, ey;int relation;int nexts[4][2] &#x3D; &#123; &#123;-1, 0&#125;, &#123;0, 1&#125;, &#123;1, 0&#125;, &#123;0, -1&#125; &#125;;struct Node &#123;    int x, y, step;&#125;;bool border(int x, int y)&#123;    if (x &lt; 0 || y &lt; 0 || x &gt;&#x3D; r || y &gt;&#x3D; c)        return false;    return true;&#125;int bfs()&#123;    queue&lt;Node&gt; que;    while (!que.empty())        que.pop();    Node d, t;    t.x &#x3D; sx;    t.y &#x3D; sy;    t.step &#x3D; 0;    que.push(t);    vis[sx][sy] &#x3D; true;    while (!que.empty())    &#123;        t &#x3D; que.front();        que.pop();        if (t.x &#x3D;&#x3D; ex &amp;&amp; t.y &#x3D;&#x3D; ey)            return t.step;        for (int i &#x3D; 0; i &lt; relation; i++)        &#123;            if (k[i][0] &#x3D;&#x3D; t.x &amp;&amp; k[i][1] &#x3D;&#x3D; t.y &amp;&amp; !vis[k[i][2]][k[i][3]] &amp;&amp; a[k[i][2]][k[i][3]] !&#x3D; &#39;#&#39;)            &#123;                d.x &#x3D; k[i][2], d.y &#x3D; k[i][3];                d.step &#x3D; t.step + 1;                que.push(d);                &#x2F;&#x2F;cout &lt;&lt; d.x &lt;&lt; &quot; &quot; &lt;&lt; d.y &lt;&lt; endl;                vis[d.x][d.y] &#x3D; true;            &#125;            if (k[i][2] &#x3D;&#x3D; t.x &amp;&amp; k[i][3] &#x3D;&#x3D; t.y &amp;&amp; !vis[k[i][0]][k[i][1]] &amp;&amp; a[k[i][0]][k[i][1]] !&#x3D; &#39;#&#39;)            &#123;                d.x &#x3D; k[i][0], d.y &#x3D; k[i][1];                d.step &#x3D; t.step + 1;                que.push(d);                &#x2F;&#x2F;cout &lt;&lt; d.x &lt;&lt; &quot; &quot; &lt;&lt; d.y &lt;&lt; endl;                vis[d.x][d.y] &#x3D; true;            &#125;        &#125;        for (int i &#x3D; 0; i &lt; 4; i++)        &#123;            d.x &#x3D; t.x + nexts[i][0];            d.y &#x3D; t.y + nexts[i][1];            if (border(d.x, d.y) &amp;&amp; !vis[d.x][d.y] &amp;&amp; a[d.x][d.y] !&#x3D; &#39;#&#39;)            &#123;                d.step &#x3D; t.step + 1;                que.push(d);                &#x2F;&#x2F;cout &lt;&lt; d.x &lt;&lt; &quot; &quot; &lt;&lt; d.y &lt;&lt; endl;                vis[d.x][d.y] &#x3D; true;            &#125;        &#125;    &#125;    return -1;&#125;void solve()&#123;    int t;    cin &gt;&gt; t;    while (t--)    &#123;        cin &gt;&gt; r &gt;&gt; c;        for (int i &#x3D; 0; i &lt; r; i++) &#123;            for (int j &#x3D; 0; j &lt; c; j++) &#123;                scanf(&quot; %c&quot;, &amp;a[i][j]);                char ch &#x3D; a[i][j];                if (ch &#x3D;&#x3D; &#39;S&#39;)                    sx &#x3D; i, sy &#x3D; j;                else if (ch &#x3D;&#x3D; &#39;E&#39;)                    ex &#x3D; i, ey &#x3D; j;            &#125;        &#125;        memset(vis, false, sizeof(vis));        cin &gt;&gt; relation;        for (int i &#x3D; 0; i &lt; relation; i++)        &#123;            int x1, y1, x2, y2;            scanf(&quot;%d%d%d%d&quot;, &amp;k[i][0], &amp;k[i][1], &amp;k[i][2], &amp;k[i][3]);        &#125;        cout &lt;&lt; bfs() &lt;&lt; endl;    &#125;&#125;int main()&#123;#ifdef LOCAL    freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);    freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);#endif    solve();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>科学上网 CentOS下Shadowsocks一键安装脚本（四合一，秋水逸冰版）、GoogleBBR加速</title>
      <link href="2018/10/27/Shadowsocks-easy-to-go-and-BBR-speed-up/"/>
      <url>2018/10/27/Shadowsocks-easy-to-go-and-BBR-speed-up/</url>
      
        <content type="html"><![CDATA[<p>本文使用秋水逸冰一键安装脚本，包含Python、Go等版本，一键安装，简单设置端口，密码即可。</p><p>同时，提供YouTube加速解决方案，采用Google官方BBR加速方案，具体原理可自行百度。</p><p>本文保证可以快速安装，部署使用。</p><a id="more"></a><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h2><p>使用root用户登录，运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget --no-check-certificate -O shadowsocks-all.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks-all.shchmod +x shadowsocks-all.sh.&#x2F;shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><ul><li>版本选择，有Shadowsocks-Python、ShadowsocksR、Shadowsocks-Go、Shadowsocks-libev这四种版本，默认是<code>Python</code>版的。我们这里也选择这个版本。</li><li>password，设置一下你的ss登录密码，默认是<code>teddysun.com</code>。</li><li>选择一个合适的端口，默认是<code>13914</code>。</li><li>选择加密方式，这里我们选择第7种，<code>aes-256-cfb</code>加密。</li><li>等待安装。</li></ul><h2 id="安装完成后，脚本提示如下"><a href="#安装完成后，脚本提示如下" class="headerlink" title="安装完成后，脚本提示如下"></a>安装完成后，脚本提示如下</h2><pre class="line-numbers language-none"><code class="language-none">Congratulations, your_shadowsocks_version install completed!Your Server IP :your_server_ipYour Server Port :your_server_portYour Password :your_passwordYour Encryption Method:your_encryption_methodYour QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients) ss:&#x2F;&#x2F;your_encryption_method:your_password@your_server_ip:your_server_portYour QR Code has been saved as a PNG file path: your_path.pngWelcome to visit:https:&#x2F;&#x2F;teddysun.com&#x2F;486.htmlEnjoy it!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就算安装成功了，下载Shadowsocks客户端，输入配置就可以使用了，这里提供Windows和Android的，其他的，可自行去<a href="https://github.com/shadowsocks">Github</a>上找一下。</p><ul><li><a href="https://github.com/shadowsocks/shadowsocks-windows">Shadowsocks for Windows</a><ul><li>Download the latest release from <a href="https://github.com/shadowsocks/shadowsocks-csharp/releases">release page</a>.</li></ul></li><li><a href="https://github.com/shadowsocks/shadowsocks-android">Shadowsocks for Android</a><ul><li>Download at <a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks">Google Play</a></li></ul></li></ul><h1 id="重启脚本"><a href="#重启脚本" class="headerlink" title="重启脚本"></a>重启脚本</h1><p>Shadowsocks-Python 版：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-python start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动脚本后面的参数（<code>start</code>,<code>stop</code>,<code>restart</code>,<code>status</code>）含义，从左至右依次为：启动，停止，重启，查看状态。</p><p>使用其他操作，将<code>start</code>换成<code>stop</code>、<code>restart</code>、<code>status</code>即可。</p><h1 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h1><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p><p>使用root用户登录，运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.&#x2F;shadowsocks-all.sh uninstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="各Python版本默认配置文件"><a href="#各Python版本默认配置文件" class="headerlink" title="各Python版本默认配置文件"></a>各Python版本默认配置文件</h1><p>Shadowsocks-Python 版：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;etc&#x2F;shadowsocks-python&#x2F;config.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>来自 <a href="https://teddysun.com/486.html">https://teddysun.com/486.html</a></p></blockquote><h1 id="多端口登录"><a href="#多端口登录" class="headerlink" title="多端口登录"></a>多端口登录</h1><p>Shadowsocks-Python</p><p>Shadowsocks-Python 版的配置文件路径 <code>/etc/shadowsocks-python/config.json</code>，下面以修改该配置文件来说明。</p><p>在 Linux 下建议使用 vim 或者 nano 来编辑此配置文件。具体如何使用这两种编辑器，这里不多说明，可自行去搜索相关用法。</p><p>Shadowsocks-Python 版多端口配置文件示例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;&quot;server&quot;:&quot;0.0.0.0&quot;,&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;port_password&quot;:&#123;&quot;9000&quot;:&quot;password0&quot;,&quot;9001&quot;:&quot;password1&quot;,&quot;9002&quot;:&quot;password2&quot;,&quot;9003&quot;:&quot;password3&quot;,&quot;9004&quot;:&quot;password4&quot;&#125;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;your_encryption_method&quot;,&quot;fast_open&quot;: false&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他地方不用管，重点在于 <code>port_password</code> 字段的修改。</p><p>你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。</p><p>修改完成后，保存配置文件，重启。命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-python restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>来自 <a href="https://teddysun.com/532.html">https://teddysun.com/532.html</a></p></blockquote><h1 id="连接不上解决方案"><a href="#连接不上解决方案" class="headerlink" title="连接不上解决方案"></a>连接不上解决方案</h1><p>如果新添加的端口无效，多半是没有开放端口，参考下边设置端口开放（8000改成自己想要开放的端口就可以了）。</p><h2 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h2><p>centos7中的防火墙改成了firewall，使用iptables无作用。<br>启动防火墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开放端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone&#x3D;public --add-port&#x3D;8000&#x2F;tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回<code>success</code>代表成功。</p><p>重启防火墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CentOS6"><a href="#CentOS6" class="headerlink" title="CentOS6"></a>CentOS6</h2><p>CentOS6 使用如下命令。</p><p>开放端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;sbin&#x2F;iptables -I INPUT -p tcp --dport 8000 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启防火墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;etc&#x2F;init.d&#x2F;iptables restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="GoogleBBR加速"><a href="#GoogleBBR加速" class="headerlink" title="GoogleBBR加速"></a>GoogleBBR加速</h1><p>最近，Google 开源了其 TCP BBR 拥塞控制算法，并提交到了 Linux 内核，从 4.9 开始，Linux 内核已经用上了该算法。根据以往的传统，Google 总是先在自家的生产环境上线运用后，才会将代码开源，此次也不例外。</p><p>根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上，网速甚至可以提升好几个数量级。</p><p>于是我根据目前三大发行版的最新内核，开发了一键安装最新内核并开启 TCP BBR 脚本。</p><h2 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h2><ul><li>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+</li><li>虚拟技术：<code>OpenVZ 以外</code>(<code>openVZ</code>的在下边)的，比如 KVM、Xen、VMware 等</li><li>内存要求：≥128M</li><li>日期　　：2018 年 06 月 09 日</li></ul><p>如何查看VPS采用的虚拟技术？<a href="https://5chenglin.github.io/2019/02/20/20190220-Linux-Speedtest/">click here</a></p><h2 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h2><ol><li>本脚本已在 <a href="https://teddysun.com/t/vultr"><strong>Vultr</strong></a> <strong>上的</strong> <strong>VPS</strong> <strong>全部测试通过。</strong> </li><li>当脚本检测到 VPS 的虚拟方式为 OpenVZ 时，会提示错误，并自动退出安装。</li><li>脚本运行完重启发现开不了机的，打开 VPS 后台控制面板的 VNC, 开机卡在 grub 引导, 手动选择内核即可。</li><li>由于是使用最新版系统内核，最好请勿在生产环境安装，以免产生不可预测之后果。</li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用root用户登录，运行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">wget --no-check-certificate https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;across&#x2F;raw&#x2F;master&#x2F;bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; .&#x2F;bbr.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。</p><p>重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</p><pre class="line-numbers language-none"><code class="language-none">uname -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看内核版本，显示为最新版就表示 OK 了</p><pre class="line-numbers language-none"><code class="language-none">sysctl net.ipv4.tcp_available_congestion_control<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值一般为：<code>net.ipv4.tcp_available_congestion_control = bbr cubic reno</code></p><p>或者为：<code>net.ipv4.tcp_available_congestion_control = reno cubic bbr</code></p><pre class="line-numbers language-none"><code class="language-none">sysctl net.ipv4.tcp_congestion_control<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值一般为：<code>net.ipv4.tcp_congestion_control = bbr</code></p><pre class="line-numbers language-none"><code class="language-none">sysctl net.core.default_qdisc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值一般为：<code>net.core.default_qdisc = fq</code></p><pre class="line-numbers language-none"><code class="language-none">lsmod | grep bbr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。</p><blockquote><p>参考资料：<a href="https://teddysun.com/489.html">https://teddysun.com/489.html</a></p></blockquote><h2 id="采用OpenVZ架构的BBR加速"><a href="#采用OpenVZ架构的BBR加速" class="headerlink" title="采用OpenVZ架构的BBR加速"></a>采用OpenVZ架构的BBR加速</h2><p>OpenVZ平台的通过使用Rinetd来进行BBR加速，如果本方案无法正常安装，请查找别的Rinetd一键安装脚本即可。</p><h3 id="Debian-or-Ubuntu系统"><a href="#Debian-or-Ubuntu系统" class="headerlink" title="Debian or Ubuntu系统"></a>Debian or Ubuntu系统</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#适用于单网卡（单IP）服务器：wget https:&#x2F;&#x2F;github.com&#x2F;tcp-nanqinlang&#x2F;lkl-rinetd&#x2F;releases&#x2F;download&#x2F;1.1.0&#x2F;tcp_nanqinlang-rinetd-debianorubuntu.shbash tcp_nanqinlang-rinetd-debianorubuntu.sh#如果提示only support OpenVZ !，则使用下面这个脚本wget https:&#x2F;&#x2F;github.com&#x2F;tcp-nanqinlang&#x2F;lkl-rinetd&#x2F;releases&#x2F;download&#x2F;1.1.0-nocheckvirt&#x2F;tcp_nanqinlang-rinetd-debianorubuntu-nocheckvirt.shbash tcp_nanqinlang-rinetd-debianorubuntu-nocheckvirt.sh#适用于多网卡（多IP）服务器，会为所有网卡（所有IP）提供加速：wget https:&#x2F;&#x2F;github.com&#x2F;tcp-nanqinlang&#x2F;lkl-rinetd&#x2F;releases&#x2F;download&#x2F;1.1.0&#x2F;tcp_nanqinlang-rinetd-debianorubuntu-multiNIC.shbash tcp_nanqinlang-rinetd-debianorubuntu-multiNIC.sh#如果提示only support OpenVZ !，则使用下面这个脚本wget https:&#x2F;&#x2F;github.com&#x2F;tcp-nanqinlang&#x2F;lkl-rinetd&#x2F;releases&#x2F;download&#x2F;1.1.0-nocheckvirt&#x2F;tcp_nanqinlang-rinetd-debianorubuntu-nocheckvirt-multiNIC.shbash tcp_nanqinlang-rinetd-debianorubuntu-nocheckvirt-multiNIC.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CentOS-7系统"><a href="#CentOS-7系统" class="headerlink" title="CentOS 7系统"></a>CentOS 7系统</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#和上面一样，也分单网卡和多网卡版本#单网卡wget https:&#x2F;&#x2F;github.com&#x2F;tcp-nanqinlang&#x2F;lkl-rinetd&#x2F;releases&#x2F;download&#x2F;1.1.0&#x2F;tcp_nanqinlang-rinetd-centos.shbash tcp_nanqinlang-rinetd-centos.sh#如果提示only support OpenVZ !，则使用下面这个脚本wget https:&#x2F;&#x2F;github.com&#x2F;tcp-nanqinlang&#x2F;lkl-rinetd&#x2F;releases&#x2F;download&#x2F;1.1.0-nocheckvirt&#x2F;tcp_nanqinlang-rinetd-centos-nocheckvirt.shbash tcp_nanqinlang-rinetd-centos-nocheckvirt.sh#多网卡wget https:&#x2F;&#x2F;github.com&#x2F;tcp-nanqinlang&#x2F;lkl-rinetd&#x2F;releases&#x2F;download&#x2F;1.1.0&#x2F;tcp_nanqinlang-rinetd-centos.shbash tcp_nanqinlang-rinetd-centos.sh#如果提示only support OpenVZ !，则使用下面这个脚本wget https:&#x2F;&#x2F;github.com&#x2F;tcp-nanqinlang&#x2F;lkl-rinetd&#x2F;releases&#x2F;download&#x2F;1.1.0-nocheckvirt&#x2F;tcp_nanqinlang-rinetd-debianorubuntu-nocheckvirt-multiNIC.shbash tcp_nanqinlang-rinetd-debianorubuntu-nocheckvirt-multiNIC.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>在<code>/home/tcp_nanqinlang</code>进行安装，所以安装完成后不要动这个文件夹了（除非你想修改端口）。</p><p>安装过程中，会提示输入端口号。多个端口号用空格隔开。不支持端口段。</p><p>安装完成后，会开启<code>rinetd-bbr</code>。以后重启机器也会随开机自启。</p><p>使用前请注意自己的<code>iptables</code>相关设置。</p><p>由于脚本刚写，所以对部分系统可能存在点问题，有疑问的欢迎去联系大佬。方式通过：<a href="https://github.com/nanqinlang">Github issue</a>、<a href="https://t.me/SometimesNaiveReporter">Telegram</a>、原文地址(不好意思，在我编辑这篇博客的时候，原文已经404了，就没贴出地址(#滑稽) )。</p><blockquote><p>OpenVZ平台BBR加速参考:<a href="https://www.moerats.com/archives/504/">https://www.moerats.com/archives/504/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
